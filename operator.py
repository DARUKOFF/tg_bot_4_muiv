from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from settings import ADMIN_USER_IDS
from keyboards import inline, reply
from data.requests import (get_application_by_id, get_student_by_id, change_application_status, get_files_by_application_id,
                           get_applications_by_status_and_operator, save_answer_file, save_answer, get_files_by_answer_id,
                           get_answer_by_id)

router = Router()


class OperatorAnswer(StatesGroup):
    application_id = State()
    answer_id = State()
    files = State()
    

@router.callback_query(F.data.startswith("start_answer_"))
async def answer_selected(callback: CallbackQuery, state: FSMContext, bot: Bot):
    application_id = callback.data.split('_')[2]
    application = await get_application_by_id(application_id)
    await change_application_status(application_id, 'process')
    student = await get_student_by_id(application.student_id)
    await bot.send_message(student.tg_id, f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{application.id} –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É')
    student_sex = '–°—Ç—É–¥–µ–Ω—Ç–∫–∏' if '–æ–≤–Ω–∞' in student.full_name else '–°—Ç—É–¥–µ–Ω—Ç–∞'
    files = await get_files_by_application_id(application.id)
    files_warn = '–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' if len(files) > 0 else ''
    await callback.message.edit_text(f'{application.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}\n\n–ó–∞—è–≤–∫–∞ ‚Ññ{application.id} '
        f'–æ—Ç {student_sex}:\n{student.full_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {student.phone_number}\n–°—Ç—É–¥. –±–∏–ª–µ—Ç: {student.student_id}\n–ì—Ä—É–ø–ø–∞: '
        f'{student.group_id}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {application.category}\n–¢–µ–∫—Å—Ç: {application.text}\n\n{files_warn}\n\n–°—Ç–∞—Ç—É—Å: '
        f'‚öôÔ∏è<b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>‚öôÔ∏è\n\n', reply_markup=await inline.start_answer(application_id))
    await state.update_data(application_id=application_id)
    await callback.message.delete_reply_markup()
    await callback.message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞—è–≤–∫—É ‚Ññ{application.id}')
    await state.set_state(OperatorAnswer.answer_id)


@router.message(OperatorAnswer.answer_id)
async def handle_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    answer_text = message.text
    if message.text:
        answer_id = await save_answer(answer_text, data['application_id'])
        await state.update_data(answer_id=answer_id)
        guide = ('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–î–æ–∫—É–º–µ–Ω—Ç"(–µ—Å–ª–∏ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ - —Ç–æ "–§–∞–π–ª"). '
             '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–§–æ—Ç–æ –∏–ª–∏ –í–∏–¥–µ–æ"(–Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ '
             '–º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –≥–∞–ª–µ—Ä–µ–∏). –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ú—É–∑—ã–∫–∏"')
        await message.answer(f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ —Ñ–∞–π–ª–æ–≤\n\n{guide}',
                              reply_markup=await inline.send_answer_now(data['application_id'], answer_id))
        await state.set_state(OperatorAnswer.files)
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞')
        return


@router.message(OperatorAnswer.files)
async def handle_answer_files(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.document:
        await save_answer_file('document', message.document.file_id, data['answer_id'])
    elif message.photo:
        await save_answer_file('photo', message.photo[-1].file_id, data['answer_id'])
    elif message.audio:
        await save_answer_file('audio', message.audio.file_id, data['answer_id'])
    elif message.video:
        await save_answer_file('video', message.video.file_id, data['answer_id'])
    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
                            reply_markup=await inline.send_answer_now(data['application_id'], data['answer_id']))
    

@router.callback_query(F.data.startswith("answer_now_"))
async def finalize_answer(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    application_id = callback.data.split('_')[2]
    answer_id = callback.data.split('_')[3]
    await send_answer(callback, application_id, answer_id, bot)
    await callback.message.answer('–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=reply.operator_main)

async def send_answer(callback: CallbackQuery, application_id, answer_id, bot: Bot):
    application = await get_application_by_id(application_id)
    answer = await get_answer_by_id(answer_id)
    await change_application_status(application_id, 'completed', answer_id)
    student = await get_student_by_id(application.student_id)
    student_sex = '–°—Ç—É–¥–µ–Ω—Ç–∫–∏' if '–æ–≤–Ω–∞' in student.full_name else '–°—Ç—É–¥–µ–Ω—Ç–∞'
    files = await get_files_by_answer_id(answer.id)
    files_warn = '–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã' if len(files) > 0 else ''
    await callback.message.edit_text(f'{application.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}\n\n–ó–∞—è–≤–∫–∞ ‚Ññ{application.id} '
        f'–æ—Ç {student_sex}:\n{student.full_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {student.phone_number}\n–°—Ç—É–¥. –±–∏–ª–µ—Ç: {student.student_id}\n–ì—Ä—É–ø–ø–∞: '
        f'{student.group_id}\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {application.category}\n–¢–µ–∫—Å—Ç: {application.text}\n\n–°—Ç–∞—Ç—É—Å: üèÅ<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∞</b>üèÅ\n\n'
        f'–í–∞—à—Ç –æ—Ç–≤–µ—Ç: {answer.text}')
    await bot.send_message(student.tg_id, f'–ó–∞—è–≤–∫–∞ ‚Ññ{application.id} –æ—Ç {application.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}'
        f'\n–¢–µ–∫—Å—Ç: {application.text}\n\n–û—Ç–≤–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:{answer.text}\n\n–°—Ç–∞—Ç—É—Å: üèÅ<b>–í—ã–ø–æ–ª–Ω–µ–Ω–∞</b>üèÅ\n\n{files_warn}')
    if len(files) > 0:
        await send_answer_files(application.id, student, files, bot)


async def send_answer_files(application, student, files, bot):
    for ifile in files:
        try:
            if ifile.answer_file_type == 'document':
                await bot.send_document(student.tg_id, document=ifile.answer_file_id, 
                                        caption=f'–ö –æ—Ç–≤–µ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç')
            elif ifile.answer_file_type == 'photo':
                await bot.send_photo(student.tg_id, photo=ifile.answer_file_id,
                                        caption=f'–ö –æ—Ç–≤–µ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ')
            elif ifile.answer_file_type == 'audio':
                await bot.send_audio(student.tg_id, audio=ifile.answer_file_id,
                                    caption=f'–ö –æ—Ç–≤–µ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∞—É–¥–∏–æ')
            elif ifile.answer_file_type == 'video':
                await bot.send_video(student.tg_id, video=ifile.answer_file_id,
                                    caption=f'–ö –æ—Ç–≤–µ—Ç—É –ø–æ –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ')
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É {student.username} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:\n{e}')
            

@router.message(F.text == "üÜï –ü—Ä–∏–Ω—è—Ç—ã–µ")
async def applied(message: Message):
    applications = await get_applications_by_status_and_operator('applied', message.from_user.id)
    apps_info = "\n".join([f'{app.id}\n–ü—Ä–∏–Ω—è—Ç–∞: {app.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}'
                            f'\n–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {app.finish_date.strftime(f"%Y.%m.%d %H:%M:%S") if app.finish_date else None}'
                            f'\n{app.text}\n<b>üÜï{app.status}üÜï</b>' for app in applications])
    if len(apps_info) > 1:
        await message.answer(f'–ü—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n\n{apps_info}', reply_markup=reply.operator_main)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫')


@router.message(F.text == "‚öô –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")
async def in_process(message: Message):
    applications = await get_applications_by_status_and_operator('process', message.from_user.id)
    apps_info = "\n".join([f'{app.id}\n–ü—Ä–∏–Ω—è—Ç–∞: {app.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}'
                            f'\n–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {app.finish_date.strftime(f"%Y.%m.%d %H:%M:%S") if app.finish_date else None}'
                            f'\n{app.text}\n‚öôÔ∏è<b>{app.status}</b>‚öôÔ∏è' for app in applications])
    if len(apps_info) > 1:
        await message.answer(f'–ó–∞—è–≤–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:\n\n{apps_info}', reply_markup=reply.operator_main)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫')


@router.message(F.text == "üèÅ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ (–ê—Ä—Ö–∏–≤)")
async def completed(message: Message):
    applications = await get_applications_by_status_and_operator('completed', message.from_user.id)
    apps_info = "\n".join([f'{app.id}\n–ü—Ä–∏–Ω—è—Ç–∞: {app.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}'
                            f'\n–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {app.finish_date.strftime(f"%Y.%m.%d %H:%M:%S") if app.finish_date else None}'
                            f'\n{app.text}\n<b>üèÅ{app.status}üèÅ</b>' for app in applications])
    if len(apps_info) > 1:
        await message.answer(f'–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:\n\n{apps_info}', reply_markup=reply.operator_main)
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫')


@router.message(F.text == "Operator2024")
async def operator_start(message: Message, bot: Bot):
    user = message.from_user
    user_link = f"<a href='tg://user?id={user.id}'>{user.full_name if len(user.full_name) > 1 else user.username}</a>"
    for admin in ADMIN_USER_IDS:
        await bot.send_message(admin, f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_link}", 
                               reply_markup=await inline.choose_role(user.id, user.username))
    await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–∫–æ—Ä–æ –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –µ–π —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è")
