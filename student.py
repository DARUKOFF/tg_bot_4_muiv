from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramForbiddenError, TelegramBadRequest

from contextlib import suppress
from datetime import datetime
from keyboards import reply, inline
from data.requests import (get_eligible_student_by_tg, set_student, set_application, get_operator_for_send, get_application_by_id, 
                           get_student_by_id, get_files_by_application_id, save_file, get_applications_by_student, 
                           get_operator_by_role)
from settings import TOKEN, COMMON_CHAT


class Authentification(StatesGroup):
    student_id = State()


class Application(StatesGroup):
    student_id = State()
    operator_id = State()
    category = State()
    text = State()
    start_date = State()


class ApplicationFiles(StatesGroup):
    application_id = State()
    files = State()


router = Router()

@router.callback_query(F.data == 'start_auth')
async def start_auth(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞')
    await state.set_state(Authentification.student_id)


@router.message(Authentification.student_id)
async def authentificate(message: Message, state: FSMContext):
    student_id = message.text
    if await set_student(student_id, message.from_user.id):
        await message.answer('–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=reply.student_main)
        await state.clear()
    else:
        await message.answer('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–≥–æ –±–∏–ª–µ—Ç–∞, –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ '
                             '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –ø—Ä–æ—Å—å–±–æ–π –¥–æ–±–∞–≤–∏—Ç—å –í–∞—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        

@router.message(F.text == '‚úç –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É')
async def create_application(message: Message, state: FSMContext):
    student = await get_eligible_student_by_tg(message.from_user.id)
    if student:
        await state.update_data(student_id=student.id)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏', reply_markup=reply.application_types)
        await state.set_state(Application.operator_id)
    else:
        await message.answer(f'–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. \n\n–ù–∞–∂–º–∏—Ç–µ /start', reply_markup=await reply.remove_kb())


@router.message(Application.operator_id)
async def application_category(message: Message, state: FSMContext):
    if message.text == 'üìÅ –î–æ–∫—É–º–µ–Ω—Ç—ã':
        category = 'documents'
    elif message.text == '‚è≥ –°—Ä–æ–∫–∏':
        category = 'terms'
    elif message.text == 'üí≤ –§–∏–Ω–∞–Ω—Å—ã':
        category = 'finances'
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞—è–≤–∫–∏', reply_markup=reply.application_types)
        return
    operator = await get_operator_by_role(category)
    await state.update_data(operator_id=operator.id)
    await state.update_data(category=category)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏', reply_markup=inline.cancel_action)
    await state.set_state(Application.text)


@router.message(Application.text)
async def application_text(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    now_str = datetime.now().strftime(f"%Y.%m.%d %H:%M:%S")
    now = datetime.strptime(now_str, f"%Y.%m.%d %H:%M:%S")
    await state.update_data(start_date=now)
    data = await state.get_data()
    await state.clear()
    application_id = await set_application(data)
    guide = ('–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –∞—Ä—Ö–∏–≤–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–î–æ–∫—É–º–µ–Ω—Ç"(–µ—Å–ª–∏ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ - —Ç–æ "–§–∞–π–ª"). '
             '–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–§–æ—Ç–æ –∏–ª–∏ –í–∏–¥–µ–æ"(–Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ '
             '–º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–∑ –≥–∞–ª–µ—Ä–µ–∏). –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ —Å–æ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞–∫ —Å–∫—Ä–µ–ø–∫–∏ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ "–ú—É–∑—ã–∫–∏"')
    await message.answer(f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –±–µ–∑ —Ñ–∞–π–ª–æ–≤\n\n{guide}', 
                         reply_markup=await inline.send_now(application_id))
    await state.update_data(application_id=application_id)
    await state.set_state(ApplicationFiles.files)


@router.message(ApplicationFiles.files)
async def handle_files(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.document:
        await save_file('document', message.document.file_id, data['application_id'])
    elif message.photo:
        await save_file('photo', message.photo[-1].file_id, data['application_id'])
    elif message.audio:
        await save_file('audio', message.audio.file_id, data['application_id'])
    elif message.video:
        await save_file('video', message.video.file_id, data['application_id'])
    else:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞')
    await message.answer(f'–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å',
                        reply_markup=await inline.send_now(data['application_id']))


@router.callback_query(F.data.startswith('application_now_'))
async def finalize_application(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    application_id = callback.data.split('_')[2]
    await send_application(application_id, bot)
    await callback.message.delete_reply_markup()
    await callback.message.answer('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', reply_markup=reply.student_main)


async def send_application(application_id, bot):
    application = await get_application_by_id(application_id)
    operator = await get_operator_for_send(application.operator_id)
    student = await get_student_by_id(application.student_id)
    gender = '–°—Ç—É–¥–µ–Ω—Ç–∫–∏' if '–æ–≤–Ω–∞' in student.full_name else '–°—Ç—É–¥–µ–Ω—Ç–∞'
    
    files = await get_files_by_application_id(application.id)
    files_warn = '–ü—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:' if len(files) > 0 else ''
    application_message = (
        f"{application.start_date}\n\n"
        f"–ó–∞—è–≤–∫–∞ ‚Ññ{application.id} –æ—Ç {gender}:\n"
        f"{student.full_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {student.phone_number}\n–°—Ç—É–¥. –±–∏–ª–µ—Ç: {student.student_id}\n–ì—Ä—É–ø–ø–∞: {student.group_id}"
        f"\n\n–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {application.category}\n–¢–µ–∫—Å—Ç: {application.text}\n\n"
        f"–°—Ç–∞—Ç—É—Å: üÜï<b>–ü—Ä–∏–Ω—è—Ç–∞</b>üÜï\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞. –°—Ç–∞—Ç—É—Å –∑–∞–≤—è–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        f"\n\n{files_warn}"
    )
    with suppress(TelegramForbiddenError, TelegramBadRequest):
        await bot.send_message(operator.tg_id, application_message, 
                               reply_markup=await inline.start_answer(application.id))
    await bot.send_message(COMMON_CHAT, application_message)
     
    if len(files) > 0:
        await send_application_files(application.id, operator.tg_id, files, bot)

async def send_application_files(application, operator, files, bot):
    # bot = Bot(token=TOKEN)
    # bot.default.parse_mode = 'HTML'
    for ifile in files:
        try:
            if ifile.file_type == 'document':
                await bot.send_document(operator, document=ifile.file_id, 
                                        caption=f'–ö –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω –¥–æ–∫—É–º–µ–Ω—Ç')
            elif ifile.file_type == 'photo':
                await bot.send_photo(operator, photo=ifile.file_id,
                                        caption=f'–ö –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–æ—Ç–æ')
            elif ifile.file_type == 'audio':
                await bot.send_audio(operator, audio=ifile.file_id,
                                    caption=f'–ö –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –∞—É–¥–∏–æ')
            elif ifile.file_type == 'video':
                await bot.send_video(operator, video=ifile.file_id,
                                    caption=f'–ö –∑–∞—è–≤–∫–µ ‚Ññ{application} –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤–∏–¥–µ–æ')
        except Exception as e:
            print(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å ID: {operator} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:\n{e}')
    # await bot.session.close()
        

@router.message(F.text == 'üìÉ –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫')
async def list_applications(message: Message):
    student = await get_eligible_student_by_tg(message.from_user.id)
    if student:
        applications = await get_applications_by_student(student.id)
        apps_info = "\n".join([f'{app.id}\n–ü—Ä–∏–Ω—è—Ç–∞: {app.start_date.strftime(f"%Y.%m.%d %H:%M:%S")}'
                            f'\n–ó–∞–≤–µ—Ä—à–µ–Ω–∞: {app.finish_date.strftime(f"%Y.%m.%d %H:%M:%S") if app.finish_date else None}'
                            f'\n{app.text}\n<b>‚ö™{app.status}‚ö™</b>' for app in applications])
        if len(apps_info) > 1:
            await message.answer(f'–í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n{apps_info}', reply_markup=inline.cancel_action)
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫')
    else:
        await message.answer(f'–í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é. \n\n–ù–∞–∂–º–∏—Ç–µ /start', reply_markup=await reply.remove_kb())


@router.message()
async def unknown_command(message: Message):
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
